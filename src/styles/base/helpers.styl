// HELPER
app.helper = {
    display: {
        type: ('block' 'inline-block' 'flex' 'table' 'table-cell'),
        option: {
            table: {
                table-layout: ('fixed' 'auto')
            },
            flex: {
                flex-direction: ('row' 'row-reverse' 'colum' 'column-reverse'),
                flex-wrap: ('wrap' 'nowrap' 'wrap-reverse'),
                justify-content: ('flex-start' 'flex-end' 'center' 'space-around' 'space-between')
            }
        }
    },
    aligning: {
        horizontal: ('left' 'center' 'right'),
        vertical: ('top' 'middle' 'bottom')
    },
    spacing: {
        margin: ('top' 'right' 'bottom' 'left' 'center'),
        padding: ('top' 'right' 'bottom' 'left')
    },
    positioning: {
        type: ('static' 'relative' 'absolute' 'fixed'),
        side: ('top' 'right' 'bottom' 'left')
    }
};

// DISPLAY
init-helper-display(breakpoint-name, display-types = app.helper.display.type) {
    for display-type in (display-types) {
        // TABLE OPTIONS
        if (is(display-type, table)) {
            for option, values in (app.helper.display.option.table) {
                for value in (values) {
                    .{option}-{value}-{breakpoint-name} {
                        {option}: unquote(value);
                    }
                }
            }
        }

        // FLEX OPTIONS
        if (is(display-type, flex)) {
            for option, values in (app.helper.display.option.flex) {
                for value in (values) {
                    .{option}-{value}-{breakpoint-name} {
                        {option}: unquote(value);
                    }
                }
            }
        }

        .{display-type}-{breakpoint-name} {
            display: unquote(display-type);
        }
    }
}

// WIDTH
init-helper-width(breakpoint-name) {
    for value in (app.constant.full..app.grid.length) {
        .width-{value}-{breakpoint-name} {
            width: percentage(app.constant.full / value);
        }
    }
 }

// ALIGN
init-helper-aligning(breakpoint-name) {
    for type, values in (app.helper.aligning) {
        for value in (values) {
            .align-{value}-{breakpoint-name} {
                type = type == vertical ? type : text;

                {type}-align: unquote(value);
            }
        }
    }
}

// SPACING
init-helper-spacing(breakpoint-name) {
    for type, values in app.helper.spacing {
        for value in (values) {
            .{type}-{value}-{breakpoint-name} {
                if (type == margin && value == center) {
                    margin-left: auto;
                    margin-right: auto;
                } else {
                    {type}-{value}: to-unit(app.grid.spacing);
                }
            }
        }
    }
}

// POSITIONING
init-helper-positioning(breakpoint-name) {
    for key, values in app.helper.positioning {
        for value in (values) {
            .{value}-{breakpoint-name} {
                if (key == side) {
                    {value}: app.constant.zero;
                } else {
                    position: unquote(value);
                }
            }
        }
    }
}
